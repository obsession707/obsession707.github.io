<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>中文日志 on Rehoni | 罗皓</title>
    <link>/cn/</link>
    <description>Recent content in 中文日志 on Rehoni | 罗皓</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 31 Jan 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/cn/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Oracle排查账户锁定</title>
      <link>/cn/2020-06-22-oracle%E6%8E%92%E6%9F%A5%E8%B4%A6%E6%88%B7%E9%94%81%E5%AE%9A/</link>
      <pubDate>Mon, 22 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>/cn/2020-06-22-oracle%E6%8E%92%E6%9F%A5%E8%B4%A6%E6%88%B7%E9%94%81%E5%AE%9A/</guid>
      <description>设置时间格式 遇到登录报用户被锁时，先不要着急解锁，先使用dba角色的用户登录，设置具体时间格式，以便我们查询具体的被锁时间：
alter session set nls_date_format=&amp;#39;yyyy-mm-dd hh24:mi:ss&amp;#39;; 查看具体被锁时间： select username,lock_date from dba_users where username=&amp;#39;username&amp;#39;; 或者
select username,lock_date from dba_users where username=&amp;#39;xxx&amp;#39;; 如果发现被锁用户的时间信息已经不存在，原因是用户已经被客户解锁，所以视图dba_users中已经看不到用户被锁时间的信息。
这个时候通过查看表user$来解决这个问题：
select name,ltime from user$ where name =&amp;#39;XXXX&amp;#39;; 查看造成用户被锁的ip 主要监听日志，一般路径为：$ORACLE_HOME/network/admin/log/listener.log日志
查看监听日志：可以看出IP、登录用户Res0l、端口2067、登陆程序Datagrip等内容。
22-6月 -2020 15:31:20 * (CONNECT_DATA=(SID=ora12a)(CID=(PROGRAM=DataGrip)(HOST=__jdbc__)(USER=Res0l))) * (ADDRESS=(PROTOCOL=t cp)(HOST=198.120.100.198)(PORT=2067)) * establish * ora12a * 0 2020-06-22T15:31:23.829623+08:00 22-6月 -2020 15:31:23 * (CONNECT_DATA=(SID=ora12a)(CID=(PROGRAM=DataGrip)(HOST=__jdbc__)(USER=Res0l))) * (ADDRESS=(PROTOCOL=t cp)(HOST=198.120.100.198)(PORT=2071)) * establish * ora12a * 0 2020-06-22T15:31:26.862394+08:00 如果实在找不到，可以在终端或cmd窗口输入lsnrctl status 输出的信息中会有监听的日志文件路径
或者执行全文件夹搜索
find /users/oracle/ -name listener.</description>
    </item>
    
    <item>
      <title>Oracle数据库备份和恢复</title>
      <link>/cn/2020-06-22-oracle%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%87%E4%BB%BD%E4%B8%8E%E6%81%A2%E5%A4%8D/</link>
      <pubDate>Mon, 22 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>/cn/2020-06-22-oracle%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%87%E4%BB%BD%E4%B8%8E%E6%81%A2%E5%A4%8D/</guid>
      <description>两种导出程序的比较和区别  exp、imp是客户段工具程序， expdp和impdp是服务端的工具程序。 exp和imp效率比较低；expdp和impdp效率高。 expdp、impdp数据泵功能强大并行、过滤、转换、压缩、加密、交互等等; 数据泵不支持9i以前版本， EXP/IMP短期内还是比较适用;   EXP-0006:出现内部不一致的错误解决办法
出现此问题的原因是：在超过9i的Oracle版本进行exp操作，并且导出的表有进行表分区，就会出现导出中断并且报错。
因此新版本Oracle数据库以数据泵进行备份恢复为主。
 在expdp、impdp命令使用时，不要习惯性的在命令末尾加上分号“;”，会导致不经意间出现错误。
1. expdp导出   在sqlplus下创建目录directory，创建逻辑目录，该命令不会在操作系统创建真正的目录，最好以system等管理员创建。
-- 需要在系统中创建真正的目录 create or replace directory DMP as &amp;#39;/users/oracle/dmp&amp;#39;; -- 可以查看已创建的逻辑目录 select * from dba_directories;   把读写权限授予特定用户
grant read,write on directory dir_dp to scott;   导出数据库
# 导出整个数据库 expdp user/psw DIRECTORY=DMP DUMPFILE=expstd.dmp FULL=y; # 按用户（执行时选择按用户进行比较合适） expdp scott/tiger@orcl schemas=scott dumpfile=expdp.dmp DIRECTORY=dpdata1; # 并行进程 expdp scott/tiger@orcl directory=dpdata1 dumpfile=scott3.dmp parallel=40 job_name=scott3 # 按表名 expdp scott/tiger@orcl TABLES=emp,dept dumpfile=expdp.</description>
    </item>
    
    <item>
      <title>java数据库（1）基本概念和try-with-resources</title>
      <link>/cn/2020-06-20-java%E6%95%B0%E6%8D%AE%E5%BA%93-1/</link>
      <pubDate>Sat, 20 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>/cn/2020-06-20-java%E6%95%B0%E6%8D%AE%E5%BA%93-1/</guid>
      <description>1. 连接池 连接池创建好固定数量的连接，数据库操作通过借用连接池的连接来进行操作，并且不关闭而是返还给连接池。
2. try-with-resources 实现autoClosable接口的类，均可以进行try-with-resources的操作。
close的顺序是，先进后出，类似堆栈。
try (Connection c = DriverManager.getConnection(&amp;#34;jdbc:mysql://127.0.0.1:3306/how2java?characterEncoding=UTF-8&amp;#34;,&amp;#34;root&amp;#34;, &amp;#34;admin&amp;#34;); Statement s = c.createStatement();) { String sql = &amp;#34;select * from hero where id = &amp;#34; + id; ResultSet rs = s.executeQuery(sql); // 因为id是唯一的，ResultSet最多只能有一条记录  // 所以使用if代替while  if (rs.next()) { hero = new Hero(); String name = rs.getString(2); float hp = rs.getFloat(&amp;#34;hp&amp;#34;); int damage = rs.getInt(4); hero.name = name; hero.hp = hp; hero.damage = damage; hero.id = id; } } catch (SQLException e) { // TODO Auto-generated catch block  e.</description>
    </item>
    
    <item>
      <title>java数据库（2）改造jdbc工具类</title>
      <link>/cn/2020-06-20-java%E6%95%B0%E6%8D%AE%E5%BA%93-2/</link>
      <pubDate>Sat, 20 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>/cn/2020-06-20-java%E6%95%B0%E6%8D%AE%E5%BA%93-2/</guid>
      <description>增删改 可以设置一个Object数组，用来占位Preparement的sql里的那些?，数组的长度就是预插入的值的数量，数组里的值就是可以录入到Preparestatement的值。
//我们发现，增删改只有SQL语句和传入的参数是不知道的而已，所以让调用该方法的人传递进来  //由于传递进来的参数是各种类型的，而且数目是不确定的，所以使用Object[]  public static void update(String sql, Object[] objects) { Connection connection = null; PreparedStatement preparedStatement = null; ResultSet resultSet = null; try { connection = getConnection(); preparedStatement = connection.prepareStatement(sql); //根据传递进来的参数，设置SQL占位符的值  for (int i = 0; i &amp;lt; objects.length; i++) { preparedStatement.setObject(i + 1, objects[i]); } //执行SQL语句  preparedStatement.executeUpdate(); } catch (Exception e) { e.printStackTrace(); } } 查询 注意这里可以定义一个接口，对select的结果集进行操作，但是不知道需要具体进行操作，调用接口的实现类，接口就可以调用实现的方法。
/* 1:对于查询语句来说，我们不知道对结果集进行什么操作【常用的就是把数据封装成一个Bean对象，封装成一个List集合】 2:我们可以定义一个接口，让调用者把接口的实现类传递进来 3:这样接口调用的方法就是调用者传递进来实现类的方法。【策略模式】 */ //这个方法的返回值是任意类型的，所以定义为Object。  public static Object query(String sql, Object[] objects, ResultSetHandler rsh) { Connection connection = null; PreparedStatement preparedStatement = null; ResultSet resultSet = null; try { connection = getConnection(); preparedStatement = connection.</description>
    </item>
    
    <item>
      <title>写给自己的说明书</title>
      <link>/cn/2920-06-20-manual/</link>
      <pubDate>Sat, 20 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>/cn/2920-06-20-manual/</guid>
      <description>私人仓库 用于推送博客。采用hugo。
1. 构建流程  在typora中写好文章 添加YAML front matter 放入此仓库的content文件夹中 图片放入static\images中，并且在博文中将路径修改为/images/xxx.jpg 使用hugo命令生成 使用脚本备份和部署  2. hugo使用 建议阅读 hugo 中文文档
以及ivy作者说明书
hugo --theme=ivy # hugo server (--theme=hyde --buildDrafts) hugo server # 部署方法不是采用的下边的方式 hugo --theme=hyde --baseUrl=&amp;#34;http://coderzh.github.io/&amp;#34; cd public git init git remote add origin https://github.com/coderzh/coderzh.github.io.git git add -A git commit -m &amp;#34;first commit&amp;#34; git push -u origin master 3. 图片路径问题   config.toml中设置baseurl，设置成‘/’即可。
  在.md的图片路径中，以static为根目录写全路径。
  假设测试baseurl为http://localhost:1313/，图片位置：/static/img/hugo/123.png，那么在Markdown中写作![图片说明](/img/hugo/123.png)。这时，在浏览器就可以看到图片了 。
  typora软件设置，这样在每个大类文件夹中都有一个img文件夹，生产新的博文之后把对应的图片拷贝到项目的static/img中去就行。</description>
    </item>
    
    <item>
      <title>基本开发守则</title>
      <link>/cn/2020-06-20-%E5%9F%BA%E6%9C%AC%E5%BC%80%E5%8F%91%E5%AE%88%E5%88%99/</link>
      <pubDate>Sat, 20 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>/cn/2020-06-20-%E5%9F%BA%E6%9C%AC%E5%BC%80%E5%8F%91%E5%AE%88%E5%88%99/</guid>
      <description>命名规范 目录 由于 Windows 和 OSX下对文件大小写不敏感，因此我们采用kebab-case命名法。
基础用法 例如：项目文件夹 my-project-name
复数 项目内的子文件夹按照作用，采用常规单词命名。不使用缩写，除非已经约定俗成的惯用法。
例如：脚本文件 scripts、模块modules、 组件components
文件 和目录一致，采用kebab-case
变量 采用camelCase，且使用英文名词
✔️ 正确示例：userCount 、listItems
❌ 错误用法：setCount set 是动词
常量 采用UPPER_CASE，即全部使用大写字母，多音节用 _ 分割例如：MAX_COUNT、URI
函数 采用camelCase，前缀为动词
   动词 含义 返回值     can 判断是否可执行某个动作(权限) 函数返回一个布尔值。true:可执行;false:不可执行   has 判断是否含有某个值 函数返回一个布尔值。true:含有此值;false:不含有此值   is 判断是否为某个值 函数返回一个布尔值。true:为某个值;false:不为某个值   get 获取某个值 函数返回一个非布尔值   set 设置某个值 无返回值、返回是否设置成功或者返回链式对象   load 加载某些数据 无返回值或者返回是否加载完成的结果    例如：getName 建议的动词约定</description>
    </item>
    
    <item>
      <title>数据库命名规则</title>
      <link>/cn/2020-06-20-%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A7%84%E8%8C%83/</link>
      <pubDate>Sat, 20 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>/cn/2020-06-20-%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A7%84%E8%8C%83/</guid>
      <description>基本原则  表名与字段的命名统一采用大写英文全称或简称，严禁用拼音或缩写； 数据库的所有表名、视图名、字段名、存储过程一律采用大写； 名称中间词的间隔采用下划线“_”拼接。  表名命名规定  表名命名统一采用大写英文全称或简称，严禁用拼音或缩写； 数据库的所有表明、视图名、字段名、存储过程一律采用大写； 名词中间词的间隔采用下划线“_”拼接； 表名不可以太长，最好不要超过3个英文单词长度（30个字母）； 在表创建完成前，应该为表添加表的注释。  表设计规范  所有字段在设计时，除以下数据类型timestamp、image、datetime、smalldatetime、uniqueidentifier、binary、sql_variant、binary、varbinary外，最好有默认值； 字符型的默认值为一个空字符值串‘’； 数值型的默认值为数值0； 逻辑型的默认值为数值0（其中：系统中所有逻辑型中数值0表示为“假”，数值1表示为“真”）； datetime、smalldatetime类型的字段没有默认值，必须为NULL； 当字段定义为字符串型时，建议使用varchar2（varchar和varchar2的区别）而不是用nvarchar； 字段的描述：  字段必须填写描述信息（注释） 尽量遵守第三范式的标准（3NF）  表内的每一个值都只能被表达一次（列名不重复） 表内的每一行都应当被唯一的标示（标识唯一性，如自动增长主键） 表内不应该存储依赖于其他键的非键信息      字段名命名约定  数据库字段应该是有意义且易于理解的，最好是能够表达字段含义的英文字母； 系统中所有属于内码，即仅用于标识唯一性和程序内部用到的标识性字段，字段名称建议取为ID，采用类型为整型或长整型，也可以使用字符类型； 系统中属于是业务内的编号字段，代表一定业务信息，建议字段命名为CODE，如线路编号LINE_CODE； 不要在数据库表字段（列名）中包含数据类型，如：datetime； 不要在数据库表字段（列名）命名时重复表名，可以使用表名首字母（不包含数据库表名前缀）。  注意：
​	在数据库表字段（列名）命名时不建议使用数据库关键字，如：name，time，datetime，password等。
存储过程命名规定 存储过程的命名请遵循以下命名规范：PRO_+系统模块（与表前缀类似）+_+功能标识英文单词或英文单词缩写。
如果一个存储过程只对一个表进行操作，建议存储过程的名称就用存储过程的表的表名（不带前缀）。这样有利于根据表名找到相应的存储过程。例如，用于清洗缺陷信息的过程PRO_DEFECT_CLEANING。
存储过程设计规范  在存储过程中必须说明一下内容：  目的：说明此存储过程的作用。 作者：首次创建此存储过程的人的姓名。在此请使用中文全名，不允许使用英文简称。 创建日期：创建存储过程的日期。 修改记录：修改记录需包含修改顺序号、修改者、修改日期、修改原因，修改时不能直接在原来的代码上修改，也不能删除原来的代码，只能先将原来的代码注释掉，再重新增加正确的代码。修改顺序号的形式为：log1，log2，log3。。。根据修改次数顺序增加，同时在注释掉的原来的代码块和新增的正确代码块前后注明修改顺序号。   对存储过程各参数及变量加中文注解。 建议在数据库中创建一个文本文件保存创建脚本。  触发器命名规范 Insert触发器加&#39;_i&amp;rsquo;，Delete触发器加&#39;_d&#39;，Update触发器加&#39;_u&amp;rsquo;。
触发器设计规范 在触发器中必须说明以下内容：
 目的：说明此触发器的作用。 创建者：首次创建此触发器的人的姓名。在此请使用中文全名，不允许使用英文简称。 修改者、修改日期、修改原因：如果有人对此触发器进行了修改，则必须在此触发器的前面加注修改者姓名、修改日期及修改原因。 对触发器各参数及变量加中文注解。 建议在数据库中创建一个文本文件保存创建脚本。  </description>
    </item>
    
    <item>
      <title>简单python轮廓</title>
      <link>/cn/2020-06-20-%E7%AE%80%E5%8D%95python%E8%BD%AE%E5%BB%93/</link>
      <pubDate>Sat, 20 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>/cn/2020-06-20-%E7%AE%80%E5%8D%95python%E8%BD%AE%E5%BB%93/</guid>
      <description>一些特性 解释型语言： 制表符和四个空格，代码末尾解释器自动加分号
i = &amp;#39;hello&amp;#39; print(type(i)) print(isinstance(i,str)) print(id(i)) # 查看内存地址 dir(i) # 查看支持的操作 list与tuple： ​	区别就是tuple是不可变的，除非tuple里边存放了list
​	list支持的操作：dir(list)，append，insert，pop
input()接收输入字符
elif为else if，为关键字
字典： Set集合： 唯一性，set可以用于文件去重
定义函数： def func() 可以return或者不return、函数可递归
切片slice： list[0:3] ，list[-2:]，支持步径操作，arr[::5]，arr[::10:2]
enumerate()取到下标和值 列表生成器： 数字、字符串以及字典均可生成列表
b = [x*x for x in range(1,11)] print(b) c = [x*x for x in range(1,11) if x%2 ==0] print(c) 生成器、异常捕获 模块化 pip install requestpython中的类 继承object类，私有函数名的声明，类的继承，空成员函数放入pass
错误与异常类 try，exception
调试 常用调试pdb，详细用法https://zhuanlan.zhihu.com/p/37294138
文件读写 建议使用with open as f，（w写入，r读出）的方式，flush()，close()</description>
    </item>
    
    <item>
      <title>word转sql表结构</title>
      <link>/cn/2020-04-15-word%E8%A1%A8%E7%BB%93%E6%9E%84%E8%BD%ACsql/</link>
      <pubDate>Wed, 15 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>/cn/2020-04-15-word%E8%A1%A8%E7%BB%93%E6%9E%84%E8%BD%ACsql/</guid>
      <description>word转sql表结构： 工作流如下：
  已经在office word编辑好的数据库说明文档
  通过按照特定的表结构，录入到excel中，前两行为中文表名和英文表名，下边为字段，下方的sheet名也为中文表名，并且注意”名称“列，是不可以有重名的，否则执行脚本的时候会报错，并且一直占用该excel导致此excel只读，无法编辑（如果修改完excel没有退出则继续修改就行）只能创建excel副本。
  打开power designer-&amp;gt;create model-&amp;gt;physical data，创建物理模型，DBMS选择对应的数据库，版本低一点没有关系，商用库为12a，选择最高的Oracle version 11g，创建之后按ctrl+shift+x打开脚本执行界面，执行以下VB脚本，生成表的物理模型。可以根据数据库文档中每一列的含义，在脚本中进行调整。执行完之后可以保存到power designer的脚本库中，方便之后重用。
&#39;&#39; @Author: 罗皓&#39; @Date: 2020-03-25 14:41:57&#39; @LastEditTime: 2020-03-26 10:11:31&#39; @Description:&#39; @LastEditors: 罗皓&#39;Option ExplicitDim mdl &#39; the current modelSet mdl = ActiveModelIf (mdl Is Nothing) ThenMsgBox &amp;quot;There is no Active Model&amp;quot;End IfDim HaveExcelDim RQRQ = vbYes &#39;MsgBox(&amp;quot;Is Excel Installed on your machine ?</description>
    </item>
    
    <item>
      <title>数据库表结构查询（Oracle版本）</title>
      <link>/cn/2020-06-20-oracle%E8%A1%A8%E7%BB%93%E6%9E%84%E6%9F%A5%E8%AF%A2/</link>
      <pubDate>Wed, 08 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>/cn/2020-06-20-oracle%E8%A1%A8%E7%BB%93%E6%9E%84%E6%9F%A5%E8%AF%A2/</guid>
      <description>直接贴代码
SELECT -- t1.Table_Name AS 表名称, -- t3.comments AS 表说明, t2.COMMENTS as 名称, t1.Column_Name AS 代码, concat(concat(t1.DATA_TYPE, &amp;#39;(&amp;#39;), concat(t1.DATA_LENGTH, &amp;#39;)&amp;#39;)) as 数据类型, case when (select count(*) from user_cons_columns c where c.table_name = t1.TABLE_NAME and c.column_name = t1.COLUMN_NAME and c.constraint_name = (select d.constraint_name from user_constraints d where d.table_name = c.table_name and d.constraint_type = &amp;#39;P&amp;#39;) ) &amp;gt; 0 then &amp;#39;1&amp;#39; else &amp;#39;0&amp;#39; end as 是键, t2.Comments AS 注释 FROM cols t1 left join user_col_comments t2 on t1.</description>
    </item>
    
    <item>
      <title>QA：记录最近和大佬交流</title>
      <link>/cn/2020-03-16-%E5%A4%A7%E4%BD%ACqa/</link>
      <pubDate>Mon, 16 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>/cn/2020-03-16-%E5%A4%A7%E4%BD%ACqa/</guid>
      <description>QA：记录最近和大佬交流 以下ME为我的发言，XY为大佬昵称缩写。
 ME：您好，我是一名刚开始工作的软件开发者，我看您在看技术书籍的时候有在做笔记，想请教一下您做笔记的思路是怎样的？有些什么心得体会吗？我现在阅读技术书籍做笔记时有点纠结：是系统性的都记录下来（感觉像跟抄书无异），还是有针对性的只记录自己未掌握或者认为重要的部分（未学习过的技术又不太清楚重点）。
XY：暂且不谈别的，你先告诉我，你从小到大上学读书，做笔记的意义是什么，或者说你做了笔记目的是什么？
ME：形成肌肉记忆以及记录一些疑难杂症吧。
XY：1.想靠做笔记形成肌肉记忆不可能的，肌肉记忆的前提是大量重复训练； 2.记录疑难杂症的目的呢？记录始终只是手段而已。看书做笔记是一个复习，归纳，总结，提炼的过程。先说复习，我一般不会一边看书一边做笔记，但是会一边看书一边勾画我觉得的重点，一般看一个礼拜，周末两天再做前5天看书章节的笔记，这样可以有效的抗击记忆曲线，你可以查查艾宾斯浩记忆曲线。
ME：我一直是边看边做笔记，就感觉啃书啃得非常艰难，效果也很糟糕
XY：第二，归纳，总结。这个不仅仅是做笔记的能力，实际上是一种学习能力了，需要长期大量学习锻炼中获得的能力，但是一般受过高等教育的学生我认为应该都有此能力。那么为什么你会认为你在抄书呢？这就涉及到第四点，提炼。因为你现在基础知识比较薄弱，很多东西对你来说都是陌生的，你无法达到快速理解，更不用说触类旁通融会贯通，所以你看哪儿哪儿都是知识点，你没办法提炼，所以你会认为到处都是重点，到处都想抄下来，所以你会认为你在抄书。
XY：当然，我不知道你实际基础有多少，有多牢，但是我认为你可能需要调整一下你看的书，你需要考虑一个问题，是不是你看的书不适合你，是不是你需要一些再基础一点的书。学习也是个循序渐进的过程，也不用好高骛远，你那么年轻，有的是时间，千万不要拔苗助长。
ME：我现在是在做spring boot相关的业务，之前有接触一些spring boot方面的知识，但是都很黑盒地在写代码，所以近期拿了本spring boot的书在看，看的有些艰难效果也没有很好，所以有些着急。心态有些浮躁，本来想说疫情期间是十分适合充实自己的一段时间，《spring boot+Vue全栈开发实战》主要是看spring boot的部分。
XY：（灵魂三问）vue你会吗？ES6熟练吗？JS怎么样？还有java，jvm, jdk底层，原理实现，特性都有好好学习过吗？还有HTTP(S)协议， 包括TCP/IP协议(包括UDP)内容，底层实现这些都学习过吗？
ME：vue之前有做过一些学习，ES6也有，但是都不是系统的学习过，赶业务的时候做过一些开发；jdk底层没有了解；http，tcpip没有&amp;hellip;
XY：所以你看我随便问你几个很基础的东西，你基本都是用过，有过一些学习，做过一些开发，但是都没有系统学习过，这就是问题所在；不要好高骛远，饭要一口一口吃，先花时间把基础打牢，再去研究框架性质的东西和实战技巧啊，至少你要先把java，jvm,jdk先深入系统的学习一边吧。
XY：我建议，你这样来，首先分 后端，前端，数据库，和基础。
XY：后端学习内容主要就是java了，你那两本书可以，但是我还推荐一本Java Web高级编程，这个xxx高级编程系列是神作，后面你学其他东西也用的到，比如javascript web编程
XY：前端主要是JavaScript，ES6或更高，Jquery，Html/CSS，React和Vue框架。
XY：数据库先学关系型，MySql或者Sqlserver什么你常用的，至少学习两种流行关系型数据库，然后学习两种NoSql，建议Redis和MongoDB。
XY：基础的话就HTTP(s)，TCP/IP，算法就去leetcode刷题吧，至少常用的，例如二分法，各种遍历二叉树，单调栈，贪心，动态规划要熟练。
ME：想请问一下https，tcp/ip什么时候看比较合适，有什么适合的书吗？我最近在刷leetcode的每日一题，打算之后按照数据结构来刷题，是否是按算法刷题会好些？
XY：http权威指南 和 TCP/IP详解，tcp/ip详解有三卷，你先只用看卷一卷2就行了。刷题前期你可以按照数据结构来刷，后面熟练了按算法来刷。有些书很厚，但是不要怕，一页一页看，很快会学习完，再就是如果看到什么东西实在不能理解，可以Google一下，有些blog会有一些作者自己的体会和心得，可以帮助你理解。别浮躁，别好高骛远，先打好基础。
 大佬也是只玩真实，非常耐心也非常真实的一个人，做笔记的方式确实是给我很大启发，感觉自己蹦蹦跳跳玩耍的这几年，把自己的学习方法都丢光了，坐享其成是不行的，荒废下去整个人将会毫无建树，系统性的学习任何时候都是非常重要的。
受益匪浅。虽然看起来就是好好打好基础的那一套被说烂了的说辞，但是仔细想来何尝又不是这个道理呢？无非是自己心烦气躁罢了，浅尝辄止之后便开始深入学习其他的东西，遇到瓶颈是意料之中的事情，好高骛远了，还是要沉下心来踏踏实实的一个个技术的坑踩过去，事情要一件件做，在工作之余需要多抽空补好自己的基础薄弱之处。</description>
    </item>
    
    <item>
      <title>2020年2月财务实证</title>
      <link>/cn/2020-02-29-2%E6%9C%88%E8%B4%A2%E5%8A%A1%E5%AE%9E%E8%AF%81/</link>
      <pubDate>Sat, 29 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>/cn/2020-02-29-2%E6%9C%88%E8%B4%A2%E5%8A%A1%E5%AE%9E%E8%AF%81/</guid>
      <description>✋写在前边的话 没看错这是二月实证，一月实证因为某人过于懒散的原因，已经消失不见🌚一月二月虽然是呆在家里的两个月，但是数据证明花的钱的多少跟人在哪是没有关系的&amp;hellip;至少我是如此啦。
🙆‍♂️实证第4期 回家过年的一趟，也了解到家里的一些事情，于是年纪小小的我刚开始工作就要补贴家用，这也是我始料未及的。难道这就是所谓的工资越高责任越大么（笑，磕磕绊绊的过吧。
净值摆上来，3.2w左右，把我卖掉大概能卖个1w的样子吧，毕竟其他的份额还在各种基金里边。这样半年努力下来只有这么一点成绩说起来还挺辛酸的。「流水」里大概能看出一点端倪，但是到此为止，一切加油。另外就是，二月工资也已经到账，接下来就是计日数钱了。
😋预算及储蓄率 一月储蓄率：10205.29-4639.57=54.54%；
二月储蓄率：10198.35-3813.47=62.6%。
害，原以为在家多多少少能有个七十八十九十的储蓄率，这才有了开头的反思呢🌚。
   预算项 之前 现在     居家支出 300 500   日常支出 600 1200   购物消费 400 800   礼物 300 500   餐饮 1000 1000   总计 2600 4000    预算再调整：一开始还是好高骛远了些，按照之前（十一月）2600为额定预算的80%计算，额定预算为3250，现在从开始修改预算体系为4000，本来想说后者体系可以从8月开始进行计算，然后发现日常支出预算爆炸了6000多，8月完全就是还债月啊…那么以这套预算体系从9月开始执行，算下来其实还是有些举步维艰。
总结：预算不能弄的太理想了。但是也不能太宽松，不然就起不到约束的作用了。
👶总结 两个月下来的预算对账如此，大笔的开支比较下来的话，新入的xr，车票机票费等的，王者荣耀氪金，还有些礼物（笑）
预算缓冲区里渐渐金额大了，真是罪恶&amp;hellip;
写到这里已经乏了，三月希望疫情好转些，工作顺利些，幸福安康，以及预算也能够稍微回一点血&amp;hellip;</description>
    </item>
    
    <item>
      <title>12月财务实证</title>
      <link>/cn/2020-01-04-12%E6%9C%88%E8%B4%A2%E5%8A%A1%E5%AE%9E%E8%AF%81/</link>
      <pubDate>Sat, 04 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>/cn/2020-01-04-12%E6%9C%88%E8%B4%A2%E5%8A%A1%E5%AE%9E%E8%AF%81/</guid>
      <description>✋写在前边的话 12月的财务实证要早点完成，迎接2020的新钟声。1.1日算是很down很丧的一天，希望真如涵哥说的一样能一直up起来~
不谈，要更新一下自己的模板。作为也大的忠实读者，totally模仿也大的FIRE财务实证开始吧，希望也大不要介意QAQ。
🙆‍♂️实证第2期 这个月底整改了一些问题：在也大的知识星球提问收获了一些解决方案，结合自己的考虑做了一些修改。
  养老保险
也大：养老保险如果是有自己的个人账户，那就算是转账，和投资记账是一个道理。
记录成支出&amp;mdash;&amp;gt;添加养老保险账户，记录成转账。减去无意义的支出分类，并且商业保险算作本金转移投资。
  给父母的转账
也大：父母给的钱看你的想法，记录为转账或者收入。如果记录成转账，就给父母建立一个虚拟账户「父母」，然后记录转账，一进一出正好是零，也不影响你的净资产。
记录成支出&amp;mdash;&amp;gt;添加「流水」账户，不算入净值，记录成转账。借还钱也可以放入其中。
  出差
也大：建立一个报销账户，出差的开支记录成转账到这个账户。报销再转回来。
记录成支出，方便报销的时候进行分类统计。在月底和报销两个时间节点来结算当月的出差费用。月底节点：通过添加一笔跨分类的支出，并且设置金额为负数，来抵消掉当前月份的所有出差支出；报销节点，添加一笔收入，金额为出差净收入，来作为实际收入。新增账户「出差未到账」存放未到账的出差报销和收入。
  收入
收入进行了调整，因为月底才发工资的缘故，之前的每月月初记录的收入实际上是上个月月末的收入，进行了调整，现在是当月收入，虽然这也导致了我七月只有收入而没有支出（八月开始记账）。但是总的来说这次调整对我之后计算储蓄率是有帮助的。
  截至12月底，我的本金积攒进度为19388.94CNY。是的，加上12月的工资相比上个月的本金还要更少了，满打满算下来这个月的总支出达到了恐怖的12136.57CNY，除去出差支出仍然有6669.1CNY，相比之下账户「出差未到账」的金额已经将将与我的本金19151.57CNY齐平（苦笑，激动的心、颤抖的手…因为之前发票的问题，跨越11月到12月的出差报销还没有经过流转到手，着实令人焦急又期待。
这里得提到一句，在10月的财务实证中，有规划自己12月结束能够积攒到26000CNY的本金，目前看来算上「出差未到账」的金额来说，我算是完成了后续调整的26000CNY的目标，甚至达成了从工作开始的规划的半年目标36000CNY。不过，自己也大概清楚，这是因为这两个月出差十分狠的情况下才达成的，这也就意味着真正看来，我出差的收入正好弥补了我之前多出的那部分支出——17000，这可不是一笔小钱，谨以为戒。
😋预算及储蓄率 说一句，Windows版本的Moneywiz3一点也不弟弟，着实给力。Android的Moneywiz3才是臭弟弟一个。
12月储蓄率为（22656.82-6669.1）÷22656.82≈70.56%，分母加上了未到账的出差收入，而房补和礼金（生日）虽然总量不多但也计入其中。提高储蓄率的最好办法还是提高收入啊（笑。
因为调整了整个出差结构的缘故，11月的储蓄率也有跟着变动：（15549.91-2597.12）÷15549.91≈83.30%，不得不说11月才是开始储蓄的第一个月，一个人出差、team leader又有餐费报销吃喝的，当真是非常快乐了。
cash flow 如下：
预算和支出
12月的预算爆的十分干脆，也算是比较特殊的一个月吧，为此从预算缓冲区中借了2000填补预算空缺，接下来的几个月看到爆红的预算条，希望能有效地抑制一下我的花钱欲望。
居家：因为退房的原因，把之前攒下的六个月的水电气物业费一口气交了，一笔巨款。
购物：12月能看的电影都给看了，加起来还真不少；也买了些乱七八糟的东西，零零碎碎凑起来就这么多。
日常：12月大项开支在于挑了个周末海岛两日游，另外就是抢到一张回家的高铁票。
礼物：12月没有人过生日（除了我自己），倒是给涵哥准备了个圣诞礼物。
餐饮：餐饮支出还算正常，几笔大的都是请朋友吃饭的支出，算是意料之中。
总体看来大项支出都是比较特殊的，在之后的月份里应该不会再出现。这个月的预算爆的出乎意料又在意料之中，自己有做心理准备但是钱包没有2333，但这也说明越是这样的情况，就越要预留一些预算的空间，很显然自己现在暂时目光还没有放的比较长远，没有预算到之后几个月的支出情况。
解决方案：多用一些Scheduled的功能把，把更多的大的支出以摊销的形式拆分，这样每个月的预算压力也会小一些。另外就是把预计的大支出先定上日程，在做不到准确的情况下，也会有一个模糊的把控。
👍愿望清单    状态 愿望 金额/CNY 加入日期 处理日期 备注      WH-1000XM3 1800 2019.12.15      😎资产配置 目前以积攒本金为主，配置基本如下：</description>
    </item>
    
    <item>
      <title>idea spring boot热部署</title>
      <link>/cn/2019-12-19-springboot%E7%83%AD%E9%83%A8%E7%BD%B2/</link>
      <pubDate>Thu, 19 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>/cn/2019-12-19-springboot%E7%83%AD%E9%83%A8%E7%BD%B2/</guid>
      <description>idea spring boot热部署 1. 引入spring boot devtools，添加maven依赖 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-devtools&amp;lt;/artifactId&amp;gt; &amp;lt;scope&amp;gt;runtime&amp;lt;/scope&amp;gt; &amp;lt;optional&amp;gt;true&amp;lt;/optional&amp;gt; &amp;lt;/dependency&amp;gt; 2. 在maven中添加插件 &amp;lt;plugin&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-maven-plugin&amp;lt;/artifactId&amp;gt; &amp;lt;configuration&amp;gt; &amp;lt;!--fork : 如果没有该项配置devtools不会起作用，即应用不会restart --&amp;gt; &amp;lt;fork&amp;gt;true&amp;lt;/fork&amp;gt; &amp;lt;addResources&amp;gt;true&amp;lt;/addResources&amp;gt;&amp;lt;!--支持静态文件热部署--&amp;gt; &amp;lt;/configuration&amp;gt; &amp;lt;/plugin&amp;gt; 3. 勾选File &amp;gt; Settings &amp;gt; Compiler-Build Project automatically 4. 一些其他的方式 非常详细的热部署说明 http://tengj.top/2017/06/01/springboot10/</description>
    </item>
    
    <item>
      <title>11月财务实证</title>
      <link>/cn/2019-12-07-11%E6%9C%88%E8%B4%A2%E5%8A%A1%E5%AE%9E%E8%AF%81/</link>
      <pubDate>Sat, 07 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>/cn/2019-12-07-11%E6%9C%88%E8%B4%A2%E5%8A%A1%E5%AE%9E%E8%AF%81/</guid>
      <description>✋写在前边的话 今天是12月7日，有些懈怠了啊，最近工作挺忙而且女朋友又跟我一起出差的缘故。加班加点、剩下的时候再用来陪女票，最后导致的结果就是，对工作之外的其他事情都没有很好的cover到，另外也要分出一部分心意照顾到她，有点水土不服的样子需要慢慢习惯，担惊受怕的一周。以上都是我十二月都快中旬还没有更新实证的借口（笑。
不谈，要更新一下自己的模板。作为也大的忠实读者，totally模仿也大的FIRE财务实证开始吧，希望也大不要介意QAQ。
🙆‍♂️实证第2期 截至11月底，好吧今天是12月7日，我的本金积攒进度为22352.48人民币。
财务自由计划：完成度未知。可以确认的是，上个月月底的资产额是在12000人民币左右，勉强达到月攒一万的程度，也是依靠十一月长达半个月的出差工作，在吃喝住不要钱以及双十一坚持着贤者模式的前提下，从净收入中勉强达到预算消费额，11月是比较轻松的一个月，也是需要努力坚持的一个月。
😋预算及存储 11月双十一堪称马云都要亏破产了的大型节日，因为考虑到之前几个月（从七月开始）的支出完全奔着预算的两倍去的，面对双十一的那几天，虽然夜不能寐踌躇不决，最终还是放下了手中的屠刀。钱包要紧钱包要紧（当然情况不容许我再嚣张地花费了、上篇有提到按年计划的时候，可以针对可以预见的未来支出来做预算转移，这种情况下剁手自然是游刃有余了）。
Windows版本的Moneywiz3真是太弟弟了，总有一天我会换成MacBook的。
11月储蓄率61.96%（净值12539.59/20239.79），因为考虑到工资月末发放的原因，12月收入为11月的工资和出差报销（笑），因为出差的原因，勉强达到60%的既定储蓄率。省吃俭用才达到的，当真非常不容易了啊！
至于预算方面的话，月底并没有留下截图，失策失策。没有对预算的控制达到以天计数，错失了比较直观的预算表达方式。报表如下，手机饼图没有明确比例。餐饮支出占比46.22%证明我还生活在水深火热当中。
而因为部分原因，为了控制我的预算达到收入的稳定占比，即控制稳定的储蓄率。有一些支出情况没有计入到预算中，例如这两月开始给父母的钱以及出差的吃穿用度的支出。而cover所有分类下的支出则接近预算的两倍。因为差旅花费十分多的原因，这个月支出的数字尤其吓人。
👍愿望清单 愿望清单目前还没有一个具体的带有金额、加入日期和处理日期的规划。
目前我的愿望清单为下，主要以物件心愿单为主：自然是很geek的iOS三件套，MacBook、iPhone和iPad pro。即使我现在iPad mini吃灰，iPhone 8给老妈用了，看着自己手里刚用一个月的p30又爱又恨，有时觉得丑陋不堪有时又觉得眉清目秀，但是生活还是得留点念想。
😎资产配置 目前以积攒本金为主，配置基本如下：
且慢：长赢指数投资计划-S定投（努力跟投）20%，以及货币三佳（且慢的余额宝，逐步放入S定投）80%。
蚂蚁财富：余额宝50%，基金50%。
👶总结  做预算还是有些懈怠。月底的截图还是很有必要的，或者做一个简单的统计报表。并且针对预算对特殊支出的控制，需要有一个比较合适的处理方案。 除月度总结外，周度的总结也不可或缺了。这个月在做财务实证之前，才意识到自己工作六个月的净收入已经达到了五万六，而真正的储蓄净值才面前达到二万二，储蓄率甚至没有达到50%。之前总觉得一步步执行并且符合自己的预算计划就可以慢慢达到期望的储蓄目标，现在感觉尤其的明显：即使自己的预算没有超支，依旧不知道自己的钱去哪里了（这是预算没有全覆盖的坏处），是十分恐怖的一件事情。所以需要量化出更多直观的数字指标来衡量。  </description>
    </item>
    
    <item>
      <title>10月财务实证</title>
      <link>/cn/2019-11-05-10%E6%9C%88%E8%B4%A2%E5%8A%A1%E5%AE%9E%E8%AF%81/</link>
      <pubDate>Sun, 03 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>/cn/2019-11-05-10%E6%9C%88%E8%B4%A2%E5%8A%A1%E5%AE%9E%E8%AF%81/</guid>
      <description>写在前面的话 其实从记账开始是很早之前的事情，但真正开始不间断地不出任何错误的记账，是从8.1开始，事无巨细。其中一个关键的节点是MoneyWiz3的使用。
用moneywiz3之前：一直用的有鱼记账，林林总总记账的日子可能有两三年吧，单单有鱼记账就有五百多天，还有网易有钱等，但都是无效的记账，因为很少去月度总结的缘故。一方面是有些逃避，一方面也是因为懒。
用moneywiz3之后：因为看到FIRE的财务自由理念，以及也大的公众号，也开始谋划准备自己的财务自由实证。但是千里之行始于足下，账本倒是毫无纰漏，但是月度总结还是因为拖延的原因，久久都未开始。最近接收到的最大的打击无非是自己的大学室友拿着比自己少的三个月工资，却已经成为了万富翁（笑），而自己还是一个月光族。开销太大，没有攒下钱来，之前计划好的预算也完全没有控制住开支。故此，觉得十分有必要开展自己的阅读开支总结了，并且重新规划预算也是势在必行。
10月度开支总结 先上图
   分类 占比 花费 分析     餐饮消费 26.53% 2053.32 外出就餐花费多，主要突出在请客吃饭上。   购物消费 18.40% 1423.80 衣服鞋帽花费多，受到秋冬换季的影响。   日常消费 9.06% 888.40 礼品礼金花费多，特殊日和特殊人。   居家消费 16.67% 1290 家具/装饰品花费多，买的第二辆电瓶车。   教育文娱 6.99% 540.95 电影、娱乐（蹦床）以及订阅花费比较多。   总计  6009.47 着实有点多   保险 2.58% 200 开始购买养老保险、预计一月800。   差旅费用 19.77% 1529.88 花出去的，终究会回来QAQ。     餐饮：下个月外出就餐的数量应该会减少，请客吃饭会变少，期望能够省吃检用。 购物：双十一来临，没有想要购买的东西、消费降级二八原则，不为买而买。 日常：交通出行会变少，少打车多骑车。 居家：电动车没被偷，居家消费不可能变得很高。 文体：主要投入在电影，订阅制一般都是年费为主。  上个月的支出超支的十分全面，但是仔细盘算又发现各有各的原因。最好的办法就是不断抠细节，每一笔交易都要让其性价比高，具有合理性。不能冲动消费，要考虑二八原则和消费降级的理念。</description>
    </item>
    
    <item>
      <title>Git实际问题</title>
      <link>/cn/2019-10-11-git%E5%AE%9E%E9%99%85%E9%97%AE%E9%A2%98/</link>
      <pubDate>Fri, 11 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>/cn/2019-10-11-git%E5%AE%9E%E9%99%85%E9%97%AE%E9%A2%98/</guid>
      <description>查看和修改当前project的用户名、密码
git config user.name &amp;amp; user.email
  本地已创建分支dev，要推送到远程分支
在远程分支中创建一个dev，利用 git push origin dev:dev 推送到远程，这样有一个坏处，如果未设置:one:中的user，则会以本地计算机或global中的信息推送过去。
故可以考虑commit之后直接push，git会提醒你push没有上游，采用git branch -u origin/dev来设置本地dev的上游为远程的origin/dev。
  合并分支到master上
https://blog.csdn.net/boysky0015/article/details/78185879
  关于记住密码、多项目不同用户
git config credential.helper store TODO: 多项目不同用户
  Changing the Git history of your repository using a script
  打开Git bash
  创建存储库的全新裸克隆
git clone --bare https://github.com/user/repo.git cd repo.git   复制粘贴脚本，替换变量
 OLD_EMAIL CORRECT_NAME CORRECT_EMAIL  #!/bin/sh  git filter-branch --env-filter &amp;#39; OLD_EMAIL=&amp;#34;your-old-email@example.</description>
    </item>
    
    <item>
      <title>Vue.js实战读书笔记（2）</title>
      <link>/cn/2019-03-08-vue-2/</link>
      <pubDate>Fri, 08 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>/cn/2019-03-08-vue-2/</guid>
      <description>学习链接：  Vue官方教程 https://cn.vuejs.org/ https://www.w3cplus.com/blog/vue  v-model: 绑定动态数据可以用v-bind来实现。   修饰符：lazy（change事件中同步），number（限定数字），trim（自动过滤首位的输入空格），
  template的DOM结构必须被一个元素包含，如果直接写成 “这里是组件 的内容”，不带&amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;是无法渲染的。
  Vue 组件的模板在某些情况下会受到HTML的限制，比如＜table＞内规定只允许是〈位〉、＜td＞、&amp;lt;th＞等这些表格元素，所以在＜table＞内直接使用组件是无效的。这种情况下，可以使用特殊的is属性来挂载组件。 &amp;lt;tbody is=&amp;quot;my-component&amp;quot;&amp;gt;&amp;lt;/tbody&amp;gt;tbody在渲染时，会被替换为组件的内容。常见的限制元素还有＜ul＞、＜ol＞、＜select&amp;gt;。
  props: 数组和对象。   props 中声明的数据与组件 data 函数 return 的数据主要区别就是： props 的来自父级，而 data 中的是组件自己的数据，作用域是组件本身，这两种数据都可以在模板 template 及计算属性 computed和方法 methods 中使用。
  由于 HT岛E 特性不区分大小写，当使用 DOM 模板时，驼峰命名 (camelCase)的 props 名称要转为短横分隔命名 (kebab-case)
&amp;lt;div id=&amp;#34; app” &amp;gt; &amp;lt;my-component warning-text ＝ ”提示信息 &amp;#34; ＞＜／ my-component&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;script&amp;gt; Vue.component ( &amp;#39; my-component &amp;#39;, { props: [ &amp;#39;warningText&amp;#39;], template:&amp;#39; &amp;lt;div&amp;gt;{{ warningText }} &amp;lt;/div&amp;gt;&amp;#39; }); var app =new Vue({ el:&amp;#39; #app &amp;#39; }) &amp;lt;/script&amp;gt;   有时候，传递的数据并不是直接写死的，而是来自父级的动态数据，这时可以使用指令 v-bind 来动态绑定 props 的值，当父组件的数据变化时，也会传递给子组件。</description>
    </item>
    
    <item>
      <title>Vue.js实战读书笔记（3）</title>
      <link>/cn/2019-03-08-vue-3/</link>
      <pubDate>Fri, 08 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>/cn/2019-03-08-vue-3/</guid>
      <description>slot分发内容 props 传递数据、 events 触发事件和 slot 内 容分发就构成了 Vue 组件的 3 个 API 来源，再复杂的组件也是由这 3 部分构成的。
  作用域：slot分发的内容作用域是在父组件上的。
  slot用法：
 单个slot：父组件中进入子组件child-component，在child-component的模板内定义一个＜slot&amp;gt;元素，并且用一个＜p＞作为默认的内容，在父组件没有使用 slot 时，会渲染这段默认的文本；如果写入了 slot， 那就会替换整个＜slot&amp;gt;。 子组件&amp;lt;slot&amp;gt;内的备用内容，它的作用域是子组件本身。 具名slot：给＜slot&amp;gt;元素指定一个 name 后可以分发多个内容，具名 Slot 可以与单个 Slot 共存。其中在＜div class＝”main与内的＜slot&amp;gt; 没有使用 name 特性，它将作为默认 slot 出现，父组件没有使用 slot 特性的元素与内容都将出现在这里。如果没有指定默认的匿名 slot，父组件内多余的内容片段都将被抛弃。 作用域插槽：在＜slot&amp;gt;元素上有一个类似 props 传递数据给组件的写法 msg＝”xxx”，将数据传到了插槽。父组件中使用了＜template＞元素，而且拥有一个 scope＝”props”的特性，这里的 props只是一个临时变量，就像 v-for=”item in items，里面的 item 一样。 template 内可以通过临时变量 props访问来自子组件插槽的数据 msg 。如果下例还在其他组件内使用，＜Ii＞的内容渲染权是由使用者掌握的，而数据却可以通过临时变量（比如 props ）从子组件内获取。 通过$slots 可以访问某个具名 slot, this .$slots.default 包括了所有没有被包含在具名 slot 中的节点。$slots 在业务中几乎用不到 ， 在用 render 函数（进阶篇中将介绍）创建组件时会比较有用，但主要还是用于独立组件开发中。  &amp;lt;div id=&amp;#34;app&amp;#34;&amp;gt; &amp;lt;my-list :books=&amp;#34;books&amp;#34;&amp;gt;&amp;lt;!</description>
    </item>
    
    <item>
      <title>Vue.js实战读书笔记（1）</title>
      <link>/cn/2019-03-07-vue-1/</link>
      <pubDate>Thu, 07 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>/cn/2019-03-07-vue-1/</guid>
      <description>计算属性缓存：method和computed？ 计算属性是基于它的依赖缓存的。一个计算属性所依赖的数据发生变化时，它才会重新取值，所以text只要不改变，计算属性也就不更新。使用计算属性还是methods取决于你是否需要缓存，当遍历大数组和做大量计算时，应当使用计算属性，除非你不希望得到缓存。
什么是dom？ 知乎回答：https://www.zhihu.com/question/34219998
v-bind绑定class和style  绑定class：可以跟原class共存，可以绑定多个class。绑定class对象，绑定class数组。可以利用三元表达式进行class的条件切换，同时也可以用computed和method进行更复杂的class条件选择。 绑定style，类似直接添加样式，同样可以绑定对象和数组。使用:style时，Vue.js会自动给特殊的css属性名称增加前缀，比如transform。  指令集合  v-cloak：是一个解决初始化慢导致页面闪动的最佳实践，常常与display:none配合使用。 v-once：定义它的元素或组件只渲染一次，包括元素或组件的所有子节点。首次渲染后，不再随数据的变化重新渲染，将被视为静态内容。 v-if、v-else-if、v-else：条件渲染指令。Vue在渲染元素时，出于效率考虑，会尽可能地复用已有的元素而非重新渲染。使用Vue扣提供的key属性，它可以让你自己决定是否要复用元素，key的值必须是唯一的。 v-show：用法与v-if基本一致，只不过v-show是改变元素的css属性display。当v-show表达式的值为false时，元素会隐藏，查看DOM结构会看到元素上加载了内联样式display:none。v-show不能再template上使用。 v-for：当需要将一个数组遍历或枚举一个对象循环显示时，就会用到列表渲染指令v-for。它的表达式需结合in来使用，类似item in items的形式。遍历数组和对象，关键字key，index。 v-show和v-if：v-if和v-show具有类似的功能，不过v-if才是真正的条件渲染，它会根据表达式适当地销毁或重建元素及绑定的事件或子组件。若表达式初始值为false，则一开始元素／组件并不会渲染，只有当条件第一次变为真时才开始编译。 修饰符: stop,prevent,capture,self,once以及按键修饰符keyCode,还有一些快捷别名：enter,tab,delete,esc,space,up,down,right,left可以配合ctrl,alt,shift,meta使用  &amp;lt;a @click.stop=&amp;#34;handle&amp;#34;&amp;gt;&amp;lt;/a&amp;gt; &amp;lt;form @submit.prevent=&amp;#34;handle&amp;#34;&amp;gt;&amp;lt;/form&amp;gt; &amp;lt;a @click.stop.prevent=&amp;#34;handle&amp;#34;&amp;gt;&amp;lt;/a&amp;gt; &amp;lt;form @submit.prevent&amp;gt;&amp;lt;/form&amp;gt; &amp;lt;div @click . capture=&amp;#34;handle&amp;#34;&amp;gt;...&amp;lt;/div&amp;gt; &amp;lt;div @click.self=&amp;#34;handle&amp;#34; &amp;gt;... &amp;lt;/div&amp;gt; &amp;lt;div @click.once=&amp;#34;handle&amp;#34; &amp;gt;... &amp;lt;/div&amp;gt; 数组更新：  push,pop,shift,unshift,splice,sort,reverse 会改变原有数组 filter,concat,slice 返回新数组 Vue 在检测到数组变化时，并不是直接重新渲染整个列表，而是最大化地复用DOM元素。替换的数组中，含有相同元素的项不会被重新渲染，因此可以大胆地用新数组来替换旧数组，不用担心性能问题。需要注意的是，以下变动的数组中，Vue是不能检测到的，也不会触发视图更新：  通过索引直接设置项，比如app.books[3] = {&amp;hellip;}.  方案一：使用Vue内置的set方法：Vue.set(app.books, 3 ,{&amp;hellip;}）如果是在webpack中使用组件化的方式（进阶篇中将介绍〉，默认是没有导入Vue的，这时可以使用$set，this.$set(app.books, 3 ,{&amp;hellip;}） 方案二：使用splice：app.books.splice(3,1,{&amp;hellip;})   修改数组长度，比如app.books.length = 1.  方案：app.book.splice(1)      </description>
    </item>
    
    <item>
      <title>「Oracle实践数据库」总结</title>
      <link>/cn/2018-04-21-oraclepracticedatabase/</link>
      <pubDate>Sat, 21 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>/cn/2018-04-21-oraclepracticedatabase/</guid>
      <description>Oracle实践数据库 关于老师 这个老师的讲课节奏其实挺快的，后边听课的时候我也在想，大概东西/知识掌握的很熟练的人，对于这样的讲解基本上就是这样子快了，不过苦了我们学生。。大概认真听课到跟上老师节奏花费了我两三周的时间，而这已经意味着十多个课时过去了。
另外，关于老师更想提的是，课程老师虽然很皮，满嘴骚话的样子，但是对于数据库甚至操作系统，计算机的理解定然是一个老司机，所以从后边的边学边实践的课来说，确实是教会了我们很多东西，虽然只是一些Oracle入门的东西，但是更多的也是教会我们如何找到学习的方法而不是说直接灌输过来，emmm大概吧，我印象比较深刻的一点就是，他上课的时候并不注重教材，而是更加注重实践的过程，可能他快节奏的讲课也是体现‘课程核心’的一种手段？
关于课程   Oracle数据库的架构
  SQL语句的一些基本操作
  Oracle数据库SQL plus的实践
总结下来其实也就这么几点吧，虽然自信我可能是两个班里为数不多的听课还算多的同学，Oracle这门课大概是也没学的怎么样，但也算是了解了Oracle的一些基本操作吧，虽然课外没有再花时间在上边，但是也算是拓宽了一点眼界吧。
  关于考试 开卷考试，带的是自己上课记录的笔记，单选题和多选题有点出乎了我的意料。。后来就基本是在蒙了，考到了很多看起来应该是必须掌握的常识类的知识，但是我并不知道，一方面可能是我复习没到位的原因，也可能是两边老师授课的方式和内容不同的原因吧，简答题倒是还行，这次考试倒是也检测出我的比较薄弱的地方，比如说SQL中PL/DML语句，还是理解不够，另外的死记硬背的知识觉得多看看大概就好。总之希望这次考试能拿到一个不太差的成绩吧。
关于自己 简单的总结一下大概就是这么几点吧：
  希望自己从一而终，不留遗憾
因为一开始并没有认真学习，大概是从讲函数开始才认真学习的，虽然前边挺多内容都是之前数据库原理学习过的东西，但是对Oracle整体并没有深刻的理解，没有一个比较好的基石吧。后边开始认真听课，但是进入状态的时间太长了。
  希望自己不要自以为是，要尽全力
也是自己的惰性在作怪，复习的时候随意了一些，虽然早就意识到周五就要考试了，心里还是抱着一些侥幸的心里，一方面也是因为认为自己听了课就可以不用那么认真的复习，带好自己的笔记就能考好。事实证明，复习得太晚自己没复习完，打印好的笔记并没有派上很大的用途，考试还是留下一个遗憾，并没有划上比较圆满的句号。
  </description>
    </item>
    
    <item>
      <title>「数字图像处理」总结</title>
      <link>/cn/2018-04-20-digitalimageprocess/</link>
      <pubDate>Fri, 20 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>/cn/2018-04-20-digitalimageprocess/</guid>
      <description>数字图像处理研讨课 总来的说学习的就是数字图像处理的一些东西吧，基于matlab来进行一些数字图像方面的操作，根据相关论文做一些研讨和实现。
关于老师 比较认真也比较幽默的老师，但是上课每次都会点名（估计上课每次点名学生全到是一件非常有成就感的事情，不过也和其他老师差不多，总之对这个老师没有很大的抗拒，虽然布置的东西有点多。总感觉姜老师可能实验室比较缺人，对我们课上的很多学生其实都是很欣赏的，大概不像是特意为了效果的鼓励，是一个比较认真比较可爱的老师呢。
关于研讨  Color image histogram 快速傅里叶变换 what is fft 维纳滤波 Digital-image-restoration-by-Wiener-filter-in-2D-case  总之我们匆忙的组了一个队伍，因为里边没有大佬的存在，自然也就不存在完全躺尸的选手，而且因为大家都比较熟，其实还是做的很认真的，并没有很敷衍塞责。虽然到后来大家都有些疲乏了，没有很大的行动力了，但感觉我们还是能够坚持做好研讨的。最后一次研讨真是辛苦宝哥哥了，宝哥哥还是很可靠的一个人啊哈哈哈不像我们这群瓜皮。为了这次研讨操碎了心，不过也算是一份努力一分收获吧。
关于大作业 想不到一个八周的研讨课，会给我们布置一个十六周的大作业。有点意想不到，同时也觉得有点血崩吧。
 理论，已有基础  综述, 解决一个具体的图像问题, 不少于20篇文献 提出新的算法, 自己提算法做一个小的实现, 写成论文   工程 自由发挥  软件系统 写一个软件说明(设计, 操作)    关于自己 关于自己的话，一开始对这门课其实也是抱着划水的态度，后来发现这门课并不简单，也可能是对这门课突然有了一点兴趣吧，觉得做点这样的事情还是挺有意思的。
  希望能保持好学习的热情
到后边确实是有些疲软了，并没有之前研讨这么有趣和有动力了。可能是惰性心理在作祟吧，对一门短暂的八周的课，都会有这样的心态只能说自己还不够成熟吧。
  没有严谨的研究态度
这个大概是来自老师的点评吧，只能说自己还不是一个很严谨的精致男孩呢，虽然我自我感觉对某些东西的要求可能要比周围人要高点，但是至少在作业上没有达到老师的要求是吗？
  </description>
    </item>
    
    <item>
      <title>Oracle实践数据库笔记-13</title>
      <link>/cn/2018-04-17-oracle-13/</link>
      <pubDate>Thu, 12 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>/cn/2018-04-17-oracle-13/</guid>
      <description>考试信息  时间: 4/20 2:00-3:30 地点: J1-311教室 开卷: 课堂笔记+教材(D33996+D32645)  考试内容  题型  单选题 30% 多选题 30% 简答题 40%   SQL语句  select where /order by/目录匹配%和_/escape 函数 substr/round/truncate/nvl/case decode(不考) 连接查询和子查询 主函数 AVG/MAX/MIN&amp;hellip;   Oracle架构 D32645 P8  服务器, 连接器, instance(内存+进程), SGA, PGA等等,名称解析, 监听器     logmnr 4/10的内容 awr  备份恢复  RMAN恢复管理器  认识RMAN RMAN常用命令 report schema;---查看数据库结构 db_unique_name  -------------------------------  list backup backup spfile; backup current controlfile; rman datafile 3; backup database; 日志文件不需要备份 list copy crosscheck copy; delete backup; backup archive all; --------------------------------  copy datafile 3 to &amp;#39;path&amp;#39;; restore recover list show configure  RMAN整库备份  spfile, controlfile 指定spfile和controlfile的备份目的地 指定datafile的备份目的地 归档( 联机日志文件的备份 ) 备份归档日志(plus archivelog) 执行备份 插入数据进入cold表 复制日志文件 摧毁数据库 恢复数据库  #文件夹中建立一个目录 list backup; delete backup; show all;##查看配置 #CONFIGURE CONTROLFILE AUTOBACKUP OFF; #CONFIGURE CONTROLFILE AUTOBACKUP FORMAT FOR DEVICE TYPE DISK TO &amp;#39;%F&amp;#39;; configure channel device type disk format &amp;#39;D:\salesback\%d_%u_%T&amp;#39;; sql&amp;gt;alter system archive log current; sql&amp;gt;select * from scott.</description>
    </item>
    
    <item>
      <title>Java核心技术卷(4)</title>
      <link>/cn/2018-04-08-javacore4/</link>
      <pubDate>Sun, 08 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>/cn/2018-04-08-javacore4/</guid>
      <description>需要了解的类库   java.util.GregorianCalendar java.text.DateFormatSymbols java.util.Random  类   类, 构造, 实例, 封装, 实例域, 方法等概念 对象: 对象的行为, 状态, 标识三个特性 类之间的关系: 依赖(uses-a), 聚合(has-a), 继承(is-a) UML语言来表达类之间的一些关系 一个对象变量并没有实际包含一个对象,而是仅仅引用一个对象. 任何对象变量的值都是对存储在另一个地方的一个对象的引用, new操作符的返回值也是一个引用. 隐式参数和显式参数, 隐式参数指对象的实例, 在方法中可以用this代指, 显式参数则为方法括号中的参数 封装的优点: 保护私密数据, 更改器方法可以执行错误检查. 封装的要求: 一个私有的数据域, 一个公有的域访问器方法, 一个公有的域更改器方法. 私有域private以及final的用法 静态域与静态方法, 静态常量和静态方法可以不用实例化对象就调用. 用静态方法的情况: 1.不需要访问对象状态,其所需参数都是通过显式参数提供 2.只需要访问类的静态域 工厂方法 对象引用进行的是值的传递 重载: 相同方法名, 不同参数 初始化块以及静态的初始化块 对象析构和finalize方法, 由于Java自动垃圾回收的机制而不支持析构器, 同时因为难以知道finalize方法什么时候调用而不用(不安全), 一般需要关闭的是一些资源如文件流等对象的close方法 静态导入, 如 import static java.lang.System.*; 就可以直接 out.println了(似乎也不常见) 类设计技巧  一定要保证数据私有 一定要对数据初始化 不要在类中使用过多的基本类型 不是所有的域都需要独立的域访问器和域更改器 将职责过多的类进行分解 类名和方法名要能够体现他们的职责    一些代码注意点 所有与通配符匹配的源文件都将被编译成为类文件</description>
    </item>
    
    <item>
      <title>Oracle实践数据库笔记-11</title>
      <link>/cn/2018-04-08-oracle-11/</link>
      <pubDate>Sun, 08 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>/cn/2018-04-08-oracle-11/</guid>
      <description>审核  强制审核 标准数据库审核 基于值的审核 细粒度审核(FGA)  desc dbms_fga;---STATEMENT_TYPES审核语句类型  execute dbms_fga.add_policy(&amp;#39;SCOTT&amp;#39;,&amp;#39;EMP&amp;#39;,&amp;#39;FGA_DEMO&amp;#39;,STATEMENT_TYPES=&amp;gt;&amp;#39;SELECT,INSERT,DELETE&amp;#39;); ---执行select,insert,delete操作  desc dba_fga_audit_trail alter session set nls_date_format=&amp;#39;yyyy-mm-dd hh24:mi:ss&amp;#39;; ---中间进行scott用户下的select,insert和delete操作  select TIMESTAMP,DB_USER,SQL_TEXT from dba_fga_audit_trail  审核DBA  show parameter audit 触发器(头部,触发条件,被触发代码)   DML触发器
添加for each row进行逐行操作显示
添加referencing old as o new as n for each row when(n.sal&amp;gt;5000)进行条件
  create table demo1(a varchar(20)); create or replace trigger scott.tr1 after update on scott.emp for each row begin insert into scott.</description>
    </item>
    
    <item>
      <title>Oracle实践数据库笔记-12</title>
      <link>/cn/2018-04-10-oracle-12/</link>
      <pubDate>Sun, 08 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>/cn/2018-04-10-oracle-12/</guid>
      <description>数据库备份和恢复   需要数据库备份恢复的情况 PDF D17090
  logmnr的使用
 启动数据库补充日志 desc v$database 🆗 select supplementallog from v$database ---不太确定supplementallog  alter database add supplemental log data;🆗  产生数据字典文件  设置数据字典文件的目的地(初始化参数) 产生数据字典文件 产生一个事务 添加需要分析的日志文件 启动分析 查询内容  ---老师教程  ---自己跑一遍🆗  ---设置一下目录,得先在文件系统中创建好文件夹  show parameter utl_file_dir 🆗 ---重启生效shutdown immediate&amp;amp;startup , path1为之前在文件系统中创建好的文件夹路径 🆗  alter system set utl_file_dir =&amp;#39;path1&amp;#39; scope=spfile;🆗 ---再show一遍是没有的,重启才生效  execute dbms_logmnr_d.build(dictionary_filename=&amp;gt;&amp;#39;名字.ora&amp;#39;,dictionary_location=&amp;gt;&amp;#39;path&amp;#39;)🆗 ---产生数据文件 提交事务  select empno,ename,sal from emp;🆗 update emp set sal=5000 where empno=7934;🆗 commit;🆗 execute dbms_logmnr.</description>
    </item>
    
    <item>
      <title>Java核心技术卷(1)</title>
      <link>/cn/2018-04-06-javacore1/</link>
      <pubDate>Fri, 06 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>/cn/2018-04-06-javacore1/</guid>
      <description>Java的一些特性   简单性
  面向对象
  网络技能
  健壮性
 Java采用的指针模型可以消除重写内存和损坏数据的可能性
   安全性
  体系结构中立
  可移植性
 Java规范中没有依赖具体实现的地方
   解释型
 增量式且轻量级的链接
   高性能
  多线程
  动态性
  </description>
    </item>
    
    <item>
      <title>Java核心技术卷(2)</title>
      <link>/cn/2018-04-06-javacore2/</link>
      <pubDate>Fri, 06 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>/cn/2018-04-06-javacore2/</guid>
      <description>JDK 从开始学习java的java7到现在已经有java10了
一些名词    术语名词 缩写 解释     Java development Kit JDK 编写Java程序的程序员使用的软件   Java runtime environment JRE 运行Java程序的用户使用的软件   Standard Edition SE 用于桌面或者简单的服务器应用的Java平台   Enterprise Edition EE 用于复杂的服务器应用的Java平台   Micro Edition ME 用于手机和其他小型设备的Java平台   Java 2 J2 过时   Software development kit SDK 过时    Java安装  Java位置 C:\Program Files\Java Java文档安装 Java jdk目录结构  使用命令行工具 javac Welcome.</description>
    </item>
    
    <item>
      <title>Java核心技术卷(3)</title>
      <link>/cn/2018-04-06-javacore3/</link>
      <pubDate>Fri, 06 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>/cn/2018-04-06-javacore3/</guid>
      <description>Java类  java.lang.stringv java.lang.StringBuilder java.util.Scanner java.lang.System java.io.Console java.io.PrintWriter java.nio.file.Paths java,math.BigInteger java.util.Arrays  数据类型  整形     数据类型 存储需求 取值范围     int 4字节 -2147483648~2147483647(正好超过20亿)   short 2字节 -32768~32767   long 8字节 &amp;hellip;算了   byte 1字节 -128~127     Java没有unsigned类型 浮点型     数据类型 存储需求 取值范围     float 4字节 有效位数6-7位   double 8字节 有效位数15位     注意3.</description>
    </item>
    
    <item>
      <title>个人搭建NexT博客的一点小问题和解决方案</title>
      <link>/cn/2018-04-05-jekyll-2/</link>
      <pubDate>Thu, 05 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>/cn/2018-04-05-jekyll-2/</guid>
      <description>初步步骤参照指南，此次搭建建立于上次搭建安装失败的基础上。
安装ruby包 安装包应该都可以下载到,我这里用的是rubyinstaller-2.5.0-2-x64版本，完成后会询问你是否安装msys2和mingw开发工具包等,我这里默认安装，具体也不太清楚这两者的具体用途,但是之前搭建失败貌似就是这方面的原因,因此考虑全部安装。
安装bundler 因为考虑到安装包bundler的位置问题,我打算放在F:\GitHub下,安装好包,然后再考虑clone这个next主题。关于cmd(我用的Cmder)无法进入其他盘的办法,直接输入盘符F:就好了。
下载next主题 安装依赖 报错如下:
$ bundle install Bundler could not find compatible versions for gem &amp;#34;mini_portile2&amp;#34;: In snapshot (Gemfile.lock): mini_portile2 (= 2.2.0) In Gemfile: github-pages was resolved to 155, which depends on jekyll-mentions (= 1.2.0) was resolved to 1.2.0, which depends on html-pipeline (~&amp;gt; 2.3) was resolved to 2.7.0, which depends on nokogiri (&amp;gt;= 1.4) was resolved to 1.8.1, which depends on mini_portile2 (~&amp;gt; 2.3.0) x64-mingw32 github-pages was resolved to 155, which depends on jekyll-mentions (= 1.</description>
    </item>
    
    <item>
      <title>Oracle实践数据库笔记-10</title>
      <link>/cn/2018-04-03-oracle-10/</link>
      <pubDate>Tue, 03 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>/cn/2018-04-03-oracle-10/</guid>
      <description>Oracle安全 1、验证 用户 sys 1、操作系统验证
2、口令文件验证
show parameter remote_login_passwordfile 1、None
2、Exclusive（单例程，多用户）
3、Shared（多例程，单用户）
 修改口令文件  &amp;lt;-cmd管理员-&amp;gt; orapwd file=D:\Oracle\product\11.2.0\dbhome_1\database\PWDdyi.ora password=admin entries=1 force=y #除系统外最多允许四个用户  禁用操作系统验证  D:\Oracle\product\11.2.0\dbhome_1\NETWORK\ADMIN\sqlnet.ora 中
SQLNET.AUTHENTICATION_SERVICES= (NTS) NTS改为NONE
desc v$pwfile_users; grant sysdba to a1 identified by a1 #授权 ... select username,sysdba from v$pwfile_users; revoke sysdba from scott , a1... #撤销 nosys 1、数据库验证
create user u1 identified by u1; conn u1/u1#报错无权限 grant creat session to u1;#给权限 2、操作系统验证
 编辑注册表   找到Oracle    增加OSAUTH_PREFIX_DOMAIN字串,值为false</description>
    </item>
    
    <item>
      <title>Oracle实践数据库笔记-9</title>
      <link>/cn/2018-03-30-oracle-9/</link>
      <pubDate>Fri, 30 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>/cn/2018-03-30-oracle-9/</guid>
      <description>管理表空间和数据文件  数据库的存储层次结构 PPT153  数据库, 表空间, 段(存储结构) 区(最小的空间分配单位)___空间管理  数据字典管理[占用系统表空间,增加系统负担,现已被废弃] 本地管理 bitmap位图 extend_id bitmap 1 1 2 0 //可用   块(最小的IO单位) 根据访问数据量来控制块的单位大小 碎片,本地管理 依据管理和性能分配表空间 索引和数据不要放在一个表空间里   空间管理  系统空间 非系统空间   创建表空间 desc dba_segments show parameter db_block_size create tablespace tbs1 datafile &amp;#39;D:\app\hwj\oradata\sales\tbs1.dbf&amp;#39; size 10m blocksize 2048;---报错  alter session set nls_language=america;---解决报错为?????的办法  show parameter cache; alter system set db_2k_cache_size= 10m; create tablespace userdata datafile &amp;#39;E:\app\Res0liya\oradata\orcl\userdata01.dbf&amp;#39; size 100m autoextend on next 5m maxsize 200m;---创建表空间  create tablespace userdata datafile &amp;#39;E:\app\Res0liya\oradata\orcl\userdata01.</description>
    </item>
    
    <item>
      <title>Oracle实践数据库笔记-8</title>
      <link>/cn/2018-03-27-oracle-8/</link>
      <pubDate>Tue, 27 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>/cn/2018-03-27-oracle-8/</guid>
      <description>管理控制文件  控制文件的作用❓ 控制文件的内容❓二进制  oradebug dump controlf 3 oradebug setmypid oradebug tracefile_name
alter session set nls_language=american
控制文件的复用🆗 内容一模一样，做多个同样的控制文件放在不同的地方  见ppt 126/383 alter system set control_files = &amp;#39;path1&amp;#39;,&amp;#39;path2&amp;#39;,&amp;#39;path3&amp;#39; scope=spfile; shutdown cp &amp;#39;path1&amp;#39;/&amp;#39;path2&amp;#39; &amp;#39;path3&amp;#39;; startup show parameter control_files; 创建控制文件  alter database backup controlfile to trace as &amp;#39;e:\trace_controlf.txt&amp;#39; alter database mount 删除控制文件之后启动报错再启动一下脚本 语句在trace_controlf.txt里边跑一下 实验：
 查看控制文件的名称和内容🆗 select name &amp;hellip; show parameter control_files; oradebug &amp;hellip;见上 控制文件的复用🆗 创建控制文件  不是很清楚，再看大佬演示一下跑一下脚本
管理日志文件   日志文件的作用</description>
    </item>
    
    <item>
      <title>Oracle实践数据库笔记-7</title>
      <link>/cn/2018-03-23-oracle-7/</link>
      <pubDate>Fri, 23 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>/cn/2018-03-23-oracle-7/</guid>
      <description>手工创建数据库（sales） 没操作起来，得等大佬带着操作一下
注意要用cmd别用windows powershell
 创建windows服务（instance） &amp;ndash;oradim  oradim -new -sid sales 将sales设为当前例程，  set oracle_sid = sales  创建/编辑初始化参数文件 pfile
 连接数据库 sqlplus————sys as sysdba——————123456    create pfile from spfile;  根据初始化参数创建相应的目录结构
 在admin和flash_recovery_area和oradata中创建sales文件夹， 对应的INITorcl.ora改成INITsales.ora并且改变其中的内容 创建口令文件  这个密码用于set Oracle_sid之后，登陆sysdba的密码 orapwd file=E:\app\Res0liya\product\11.2.0\dbhome_1\database\PWDsales.ora password=123 entries=2   执行创建数据库的语句
 启动例程以及验证数据库  startup nomount showdown immediate show parameter db_name  三个文件必须要，数据文件和日志文件system,sysaux,undo    创建数据字典视图
  创建Oracle内部包
  创建spfile</description>
    </item>
    
    <item>
      <title>Oracle实践数据库笔记-6</title>
      <link>/cn/2018-03-20-oracle-6/</link>
      <pubDate>Tue, 20 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>/cn/2018-03-20-oracle-6/</guid>
      <description>回顾 删除操作delete和drop的区别 回收站的机制 删除表的时候其实不删除文件而是改动文件名，实现加入回收站的操作
flashback ***** 数据完整性  代码 触发器 约束（开销小）  数据+规则&amp;mdash;&amp;ndash;&amp;gt;合理，有效 建立表的时候:关键字+起名字+约束类型（+字段）;
一些关键字: CHECK 检查条件 FOREIGN KEY, REFERENCES ON DELETE CASECADE, 删除部门，员工回家 ON DELETE SET NULL, 删除部门，员工待分配
添加约束和删除约束: ALTER ADD/DROP/ENABLE/DISABLE
---一点例子 ALTER TABLE table ADD [CONSTRAINT constraint] type (column) ; ALTER TABLE employee s ADD CONSTRAINT emp_manager_f k FOREIGN KEY (manager_id) REFERENCES employees (empoyee_id) ; ALTER TABLE employees DROP CONSTRAINT emp_manager_fk; desc user_constraints; desc user_cons_columns; ---添加约束的时候注意处理异常数据的操作 desc exceptions;异常表不存在 @?</description>
    </item>
    
    <item>
      <title>Oracle实践数据库笔记-5</title>
      <link>/cn/2018-03-16-oracle-5/</link>
      <pubDate>Fri, 16 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>/cn/2018-03-16-oracle-5/</guid>
      <description>锁 lock  自动，手动，力度权限 共享锁，独占锁 行锁，表锁  死锁 deadlock  Oracle能自动查到产生死锁的语句，并且回滚掉这句  两个事物冲突，然后产生死锁，使用v$lock和v$session来解决死锁
 http://www.cnblogs.com/rootq/articles/1147450.html
 SQL PLUS命令  help index
 SQL 讲完了   QL(select)
  DML(insert,update,delete,merge)
  DCL(grant,invoke)
  TCL(commit,rollback,savepoint)
  DDL(create,alter,drop,truncate,rename,comment)
  序列，索引
  建表table原则 (PPT313)
  名称空间，表的名称不能和同名称空间下的对象同名
  同义词
  创建用户和给予权限（grant）
  pserdocolumn 伪列（不在列编制里边的列，desc不可见）
  rowid 物理地址，BASE64_CODE文件号，列号，行号
 主流编制 dbms_rowid  select dbms_rowid.ROWID_RELATIVE_FNO(rowid) File#, dbms_rowid.</description>
    </item>
    
    <item>
      <title>Oracle实践数据库笔记-4</title>
      <link>/cn/2018-03-13-oracle-4/</link>
      <pubDate>Tue, 13 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>/cn/2018-03-13-oracle-4/</guid>
      <description>PL/SQL QL(select) 循环 (sql中用斜杠/执行命令)
 绝对循环 while循环 for循环  begin for i in 1..10 loop insert into t1 values(i); end loop; commit; end;（功能结束就加分号，块结束） 块结构  声明部分（可选） 可执行部分（必须） 异常处理部分（可选）   匿名块：4个部分   declare begin exception end  命名块：  create or replace procedure p1 as begin for i in 1..10 loop insert into t1 values(i); end loop; commit; end; select a.id,b.id from t1 a,t1 b where a.id+5=b.id; 或者where a.id+(select count(*) from t1)/2=b.</description>
    </item>
    
    <item>
      <title>「云计算比赛」总结</title>
      <link>/cn/2018-03-11-cloudcomputing/</link>
      <pubDate>Sun, 11 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>/cn/2018-03-11-cloudcomputing/</guid>
      <description>总结一下云计算比赛的一点得失吧
最近单曲循环的一首ed，来自《恶魔人crybaby》，今夜だけ，其实皮掉了怪可惜的，但是也没有吃后悔药的机会。同时也感觉做这种比赛如果没有沉下心来做，其实最多也只是能学到一些皮毛的东西。相反的就是考研一定要沉下心，学习本来就该是这个样子。
我做的部分 这次照样选择的javeEE的ssm框架那一套熟练的操作，之所以选这个ssm而不是什么spark，scala之类的，本来是抱着借这次机会来好好深入了解一下ssm的框架的东西，弥补一下自己的不足,也是弥补一下大三上的数据库第六次作业的网上书店和更早的tuba项目的遗憾。曾经在寒假抱着自己肝一个完完整整的与时代接轨的ssm项目，但是&amp;hellip;人还是太懒了，也不能用没有条件来当借口，毕竟人要是想做的事情，无论无何也不会苛刻的物质条件什么的而放弃吧，所以说白了自己的内心其实也是抗拒的,典型的三天打鱼两天晒网。
不过说来这次我做的部分，虽然说后来是fork了GitHub上的一个项目，通过学习他的项目来制作自己的SSM网站，虽然和我的初衷不符，但是也算是有点收获，可能自己的理解和正统还是有些偏差，但是也不枉此次的结果了。这次的代码应该可以作为以后的模板来套用和学习，虽然是啃老菜&amp;hellip;但我觉得还ok，也算是对ssm体系的一些基本操作比较熟练了，还有就是redis，感觉是一个挺有趣的东西。虽然才仅仅会redis的helloworld&amp;hellip;
一些经历 除此之外的经历反而有趣，可能是因为本身是比较乐观的性格吧。而且也没有必须要做出来的要求，或许以后上班是要被辞退的选手吧&amp;hellip;和泊淼一起在辅楼调bug的时候确实爆炸有趣，把logstash调通和redis调通的时候,是真的爆炸开心,虽然后边又崩了&amp;hellip;这个时候还正好赶上数字图像处理的研讨&amp;hellip;我疯狂鸽他们的研讨，泊淼疯狂鸽他们的乐队排练，特别有意思。然后我在这个ddl的时候写着这个blog，也是因为ddl又一次被推迟&amp;hellip;应该说是我们自认为的推迟&amp;hellip;
玄学bug调不好调不好&amp;hellip;
然后晚上一起去川味人家吃烧烤，还临时下了一个王者荣耀一起玩耍，还挺有意思的~
啊好的ddl推迟了两天 但其实这个周二我们结果还在调bug，现在其实在我看来还是有很多不好的地方。今晚大家一起吃完麻辣香锅之后，也算是在梅4辅楼再度聚首，开始进行了一波传统的讨论（纸和笔），我开始选择不打扰他们，让他们三个慢慢讨论吧。这个时候我在他们对面，开始写下现在这段话，在一个旁观者的视角下，感觉他们还是看起来没有那么皮的样子&amp;hellip;吧。
4月5日来更新 我们进决赛了&amp;hellip;</description>
    </item>
    
    <item>
      <title>Oracle实践数据库笔记-2</title>
      <link>/cn/2018-03-02-oracle-2/</link>
      <pubDate>Fri, 02 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>/cn/2018-03-02-oracle-2/</guid>
      <description>用户   sys（用户）
  sysdba（权限）
  sysoper（权限）
  空闲例程是已经关的，要先startup
  shutdown immediate 立即关闭例程
  oracle内 代码+数据（系统/用户数据）
日志  log 日志 作用：恢复 redo log 重做日志  数据文件+日志文件
记录事务 ACID
 A 原子性 C 一致性 I 隔离性（锁lock（锁外存）/闩latch（锁内存）） D 持久性/永久性  restore 还原 对应backup recover 恢复 （数据文件+日志文件）
create tablespace ts datafile &amp;#39;&amp;#39; create table scott.t(id int) insert... commit.. alter tablespace ts offline alter database create datafile 7 online recover 进程结构   服务器进程（专用服务器进程 客户连接数&amp;lt;200/共享服务器进程）</description>
    </item>
    
    <item>
      <title>Oracle实践数据库笔记-3</title>
      <link>/cn/2018-03-06-oracle-3/</link>
      <pubDate>Fri, 02 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>/cn/2018-03-06-oracle-3/</guid>
      <description>demo.sql 调用的时候不用写sql其他的要写@d:/demo
select d from scott.dept;
help index edit run
null 不参与统计 三值
  层次查询
  lock 共享锁 独享锁
  死锁 解决死锁 ：sysdba kill session ：desc v$lock;
  修改表 表名 : 增加字段 :alter table t_name add c_name type(size); 字段类型 :alter table t_name modify c_name &amp;ndash;; 字段宽度 :alter table t_name modify c_name type(size);
  代理用户
  delete DML 删之前，放至回滚段，效率较低，可回滚，不释放存储空间
  truncate DDL 效率高，不可回滚释放存储空间
  HWM high water mark</description>
    </item>
    
    <item>
      <title>Oracle实践数据库笔记-1</title>
      <link>/cn/2018-02-27-oracle-1/</link>
      <pubDate>Tue, 27 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>/cn/2018-02-27-oracle-1/</guid>
      <description>oracle服务器 1.instance
 SGA（system global area 系统） PGA（程序用的 局部）  2.database（文件的集合）
 table 表 全称 heap table 堆表 代码 数据（系统数据+用户数据） 共享池shared pool  库缓存 放代码   数据字典缓存    数据字典 dictionary sys@db&amp;gt;desc dictionary select table_name from dict where table_name like &amp;#39;%SGA%&amp;#39; 1.数据字典视图（数据文件 不改就不变）
 USER_ 当前用户是所有者 属于他自己的对象 ALL_ 当前用户有select权限 能访问 DBA_  scott@DESC user_tables select table_name from user_tables /all_tables可以看到用户的表 /能访问的表 desc user_indexes select index_name from user_indexes 2.动态性能视图（内存和控制文件）
 v$ 注意了解一下  cache 提高读性能 buffer 提高写性能 推荐书籍《oracle concepts》</description>
    </item>
    
    <item>
      <title>大三上学期末总结</title>
      <link>/cn/2018-01-27-thoughts-5/</link>
      <pubDate>Sat, 27 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>/cn/2018-01-27-thoughts-5/</guid>
      <description>&lt;p&gt;这学期，很忙碌的一个学期，经历了很多事情吧，说实话真的挺多的感触，当然也免不了为赋新词强说愁。最初选课的时候，就选了四门研讨课，说来也是，也是自己的一个老毛病，每次都是一开始定很多个目标，最后绝对是差强人意甚至更差，一路忙碌下来，其实也没有很长时间，但是感觉像是过了很久，但也像时钟拨的很快，转眼又是一年伊始。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>「数据库原理」总结</title>
      <link>/cn/2017-12-13-dbprinciple/</link>
      <pubDate>Wed, 13 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>/cn/2017-12-13-dbprinciple/</guid>
      <description>总结一下这个学期数据库这门课的一些印象深刻的东西吧
数据库第五次作业，总之就是最后凉了吧 本来打算用ssm写作业的，后来发现自己真是眼瞎1.可执行文件2.mdb文件。都是ssm没有的。尤其重要的其实还是20M的上传限制，感觉略坑&amp;hellip;后来打算用java直接写，结果突然想起java的多线程大概是已经不会了。本身用java来说对于只有三天时间的我大概也来不及了，所以最后选择是python，一开始考虑tk直接写。刚写完一个helloworld被瞬间丑哭，这才开始我的pyqt之旅，磕磕碰碰也算是有点心得。
这里不得不说下我刚到的键盘，雷柏V500Pro合金幻彩版青轴。在这个0.08分的时候我只觉这打字声音真是太大了&amp;hellip;下次写下次写&amp;hellip;还让不让人睡觉了</description>
    </item>
    
    <item>
      <title>「计算机图形学」总结</title>
      <link>/cn/2017-12-11-computergraphics/</link>
      <pubDate>Mon, 11 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>/cn/2017-12-11-computergraphics/</guid>
      <description>关于计算机图形学混分上分的心路历程
计算机图形学第二次Pre 开始混开始皮开始有躺着等大佬带的嫌疑，可以说是很酷炫的罗小黑了。
计算机图形学第三次Pre last_modified_at:2017-11-30T20:47:49 这首歌封面很赞很符合我的状态Vintage
其实也没有多大的感受 又是一次划水的操作，主要还是看着xjy和dk的操作，自己一开始分离的点的计算的时候，也没有想到过其实buffer那边的操作也是重复的结果就是虽然优化了一部分但是等dk修改完的时候，大感差距其实有点大，所以说白了其实还是自己在划水。
和大佬一组做图形学的结果一般都是，他们总会把一切弄好让你舒舒服服，总的来说这次的代码量其实比较少。主要就是重构了一下代码，然后添加了一个键盘操作。
结果就是我上的presentation的ppt里，根本没有什么可以讲的东西&amp;hellip;</description>
    </item>
    
    <item>
      <title>年末总结，又是新的开始</title>
      <link>/cn/2017-12-05-thoughts-4/</link>
      <pubDate>Tue, 05 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>/cn/2017-12-05-thoughts-4/</guid>
      <description>年末总结 我的这个2017
先放一首歌吧&amp;hellip;跨年晚会上听到的，叫做第三人格。说来2017真是过得浑浑噩噩，上半年倒是还好，但是个记忆力不佳的老年人啊，所幸记得的那么几件事（但其实也记不得多少- -），都是充满了很多很多的很棒的回忆。
尤其想念吃好睡好群里的那些小伙伴们，这个学期算来主观原因客观原因鸽了他们好多次，真是罪过啊，拥有这样多这样好的朋友们却不懂得珍惜，幸运的是他们不离不弃吧哈哈。
关于这个2018啊 总之希望自己越来越好吧，3/11回来看的时候，发现自己变好是真的很难的一件事儿。</description>
    </item>
    
    <item>
      <title>关于这几天确实是</title>
      <link>/cn/2017-12-02-thoughts-3/</link>
      <pubDate>Sat, 02 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>/cn/2017-12-02-thoughts-3/</guid>
      <description>写完这个博客的时候听到的歌,我以为是关于梦想的。大概是听出了一点不同的东西吧,不禁让我想起了淼淼写的那首歌。那么放上这首歌——He Films The Clouds Pt. 2。
十多天没有写博客已经开始有些生疏了。从第八周大数据结题之后，就开始低迷起来了，第九周其实是自己最轻松的一段时间，除了软件测试和第十周周四pre的图形学之外。其实没有别的什么事情了。然后日夜开始颠倒，执着于夜晚的时间，熬夜到三四点不愿意睡过去是个事实，知道对身体不好但是就是舍不得睡过去，到第十周更甚。
说来也是，整个人开始颓废，开始丧，开始鸽各种课，说来打击最大的其实是，第十周这周鸽了几次跑操尤其难过，emmm，现在就是个鸽课的清晨。，开始变得像x老师一样，为了跑一次6点40的早操，要通宵到这个时候起床去。所以说什么秃啊，脱发啊，什么憔悴啊，猝死啊，什么翘课被点名啊，什么失约啊，其实都是自己的原因。
后话 所以希望你啊能够早睡吧。毕竟这跑操还得跑个4周的样子不能缺了啊，能够有点自己的追求吧。不要总是精神空虚了吧，不要对生活丧失希望了啊，不要为了他人而活不要只是因为责任感而活啊，能够对自己对亲人负责吧。身体是你自己的它难受的时候你自己不难受吗？父母那么关照你是为了什么心里没有点b树吗？但你是怎么做的。
 希望你能找到一份能赋予你热情的东西吧
 </description>
    </item>
    
    <item>
      <title>计软迎新的微信小测试网站</title>
      <link>/cn/2017-11-30-thoughts-2/</link>
      <pubDate>Thu, 30 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>/cn/2017-11-30-thoughts-2/</guid>
      <description>开了个新坑，根本不知道怎么写于是就打算用暑假ssm框架写了。感觉事情可能并没有这么复杂
 就在刚刚2017年12月2日10:55:45：dk突然问我：&amp;ldquo;lh,你有没有突然觉得很寂寞？&amp;quot;。对不起，我就算寂寞我也不告诉你&amp;hellip;毕竟害怕.jpg。
 再续前缘 发现自己不会用springMVC了也是很难过，但是改写的还是要写的，就看怎么操作了&amp;hellip;不过今天是12.6号，之后的话可能先考虑把我的编译原理作业给写了吧，毕竟周五的时候要交编译原理。事情其实不算多，但也不能说少，如果能认真的话其实是可以一直忙下去的，但是全心全意扑在学习上边对我来说其实是挺困难的一件事情。除此之外也有些自己不太想做的也是一方面的原因，再者的话就只有周五开始学习了，想来自己还有无线网安的ppt还没改好，不过也是5G挺有意思的一件事儿。今天碰到通信电子线路的老师请了一个老师给我们讲座，真的外貌音色都特别像马老师！为此还特意留了张照片23333呀哈哈哈哈哈~
九龙湖计软迎新的小测试写的网站，沉迷github的后果就是什么都往github上放。</description>
    </item>
    
    <item>
      <title>「大数据处理」总结</title>
      <link>/cn/2017-11-22-bigdata/</link>
      <pubDate>Thu, 23 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>/cn/2017-11-22-bigdata/</guid>
      <description>关于大数据这个课 这学期选修的大数据是一门研讨课的形式，这就意味着学生本身是占据课上绝大部分时间的。而且在同学作报告的时候，以我的性格是绝对不会主动发言提出问题的。事实也就是如此，老师讲课的课时很少，更多其实是学生们作报告（作业好吧）。个人——两次报告，小组——一个系统。
其实内心是比较想要一个人做做报告，但还是和淼淼他们组了个队吧。想到一个人呢，报告的话自由度很高，而且一个人不怕拖累别人，毕竟本人太皮。而且这两个系统的选题，其实个人没有多大兴趣；没有兴趣驱动的东西最终能够做到差强人意哦不做到结束的原因大概也只有成绩原因了。
关于出勤 其实我想吧很多人都像我一样在短学期的时候斗志满满，做项目的时候像海绵一样疯狂地汲取着知识，在不断地学习中不断改善自己的项目，然后可以说是刚极易折吧，绷紧的弦一下子就断了，开学各种课程压下来，坚持了三四周的课，慢慢地无趣的课多了，鸽也就成了常事了。
关于大数据也就是这样一个&amp;hellip;“循序渐进”的过程，因为大数据的课时安排的很紧吧，但其实内容不多也还算是枯燥（虽然老师真的很好超级好，尤其是到第七周第八周的时候，因为安排下来了，小组的第二次报告逐步接近deadline的时候，其实内心还是蛮紧迫的，但身体仿佛生锈行动不起来，拖拖踏踏到最后几天，几个皮皮才开始聚在一起，在Game#开始了这次征途，然后自然而然地，第七周第八周的大数据课基本没有去，虽然本着本来也就是同学在报告，其实去不去无所谓毕竟大家水平差不多，但这么一想那老师讲的就值得听了？大家讲的东西其实没有本质区别，大概也只是为了自己心里找个借口，而鸽了的课的时间其实也没有在做一些正事&amp;hellip;作业也在那个时候压下来，就感觉弦慢慢绷紧的感觉，久违了
我做的我想到的 爬虫，大概是我一直在项目里做的部分，很简陋，就是urllib2+bs4就是一个简简单单的爬虫，当初迪凯也是这样说的，爬取一个这样的网页不需要什么高端的操作，（再说我也不一定学不会也算是学会了很多东西吧，关于py的bs4怎么爬取标签，关于urllib的request，关于pymysql的链接数据库操作，其他的几种有机会一定试试关于中途用py2.7后来又换用3.6的两种版本的一些小区别&amp;hellip;最大的收获也是pycharm的调试，基本上是一边调试一边码代码，这个时候我能清清楚楚感受到自己的进展，比调bug有意思多了~虽然因为py的一些问题弄的迪凯不胜其烦&amp;hellip;
可以说写这些代码的时候，是我最认真最专注最开心的一段时间，能学到东西是一方面，有人陪着也是一方面，能够并肩的时候，谁也不希望自己还一直孤独着不是吗？=-= 最后写出了一个奇怪的但是简单的spider，初窥爬虫的新世界。因为没有多线程的原因，爬取数据的时候爆炸慢，爬完一遍大概需要四五个小时，效率很低但是很欣慰，大概设计方面也有很多问题，没有要修改的意思一方面也是因为自己懒惰，借口就是自己是初学者呗233333
后续 后来，绷紧的弦断了&amp;hellip;哦也不，大数据写完又和迪凯通宵撸了一手代码，整个人没有dalao多久，又变成了一个皮皮虾，(啊刚刚给我的vscode换了个字体感觉自己棒棒哒，等线中文很赞~~开始写不动东西，开始熬不动夜，开始四个人一起去吃麻辣香锅特辣&amp;hellip;说来记忆中最深刻的，还是那天晚上四个皮皮,在梅4辅楼game#，弹着吉他喝着可乐码着代码聊着天，还有《倔强的罗皓不将就的歌单》..之类的神奇的操作。时间就这样悄悄地从指缝间溜走了外边的风就慢慢吹
除此之外，第八周的周二终于肝完就立马上课跑去pre了，看到橙子涵讲的其实心里虚得很，那句话怎么说的来着，努力了不知道结果如何，就算心里虚的很也要强撑。周三因为没有去大数据的最后一节结课，这又是另外一个故事了~23333是不是说明自己慢慢成为一个有故事的人呢?
这几天橙子涵借此机会用大数据的课程报告向学院做了个srtp的申请,虽然在我和淼淼看来，都不大抱着希望&amp;hellip;就这样慢慢走过来，明天计算机268第一个答辩&amp;hellip;就莫名虚的很,哪有大数据用mysql做数据存储的啊&amp;hellip;还是我写的这串代码&amp;hellip;
官方个人心得2333 关于这次大数据的项目的实现，我在组内更多的是做了一些数据爬取方面的微小的工作，在项目不断进展中，我对大数据的理解也不断加深，整个流程这样比较清晰摆在面前的时候，只感觉这样做下去就能够把它做好，虽然还有很多不足的地方，但是目标明确的情况下，在项目进展中才不会有挫败感，才会更自信要求更高地做好每一份工作。
关于数据爬取—爬虫，终于开始接触爬虫，这次参考了多方面的资料打算从安居客这个网站入手，是因为这个网站对爬虫比较友好，这次数据爬取过程中体会很多，关于爬虫的技术性问题没少请问别人，一方面是自己技术和经验上的不足，二是爬虫的定制化比较强需要自己不断理解和钻研，这次也算是碰到了挺多的难题和bug，虽然最后爬取的效率很低，没有框架没有多线程，但是从这次爬虫中除了对大数据的数据预处理和数据清洗的重要性有了深刻的认识，也是对简单爬虫整体的流程有了一个具体而清晰的认识，也算是提供了一份宝贵的经验和模板，同时也学会了pycharm的debug功能对爬虫的便利之处。美中不足的地方就是爬虫的优化确实不够，爬取的效率太低，一路坎坎坷坷才爬取所有的数据。</description>
    </item>
    
    <item>
      <title>这个季节有点儿凉</title>
      <link>/cn/2017-11-23-thoughts-1/</link>
      <pubDate>Thu, 23 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>/cn/2017-11-23-thoughts-1/</guid>
      <description>这样的清晨总给我一种即将世界末日的错觉。每天早上起得很早，但总是没有一个人早，间歇性已经开始很努力，但总是没有一个人努力。我很好奇那些能日复一日年复一年坚持下来的人啊：他们是怎么做到如此坚持下来的呢？
早上跑操的时候，随手一拍路上的景色。居然会有人觉得这还挺好看的？说来也是，对我来说几乎每天(没跑操绝对不去！)都要见的场景。一开始或许被惊艳了那么一瞬间，但后来的日子还是稀疏平常。
我常常在想，会有那么一个人儿，会觉得这样的普通景色都很漂亮，是因为她只经过去往自习室的路，在很多人尚且还在被窝的6点清晨里。艰难地爬起床风雨无阻地去自习去学习是怎样一种信念和坚持我不知道一个人的内心是怎样的想法但是大概是有一种倔强吧。我想就是我下定决心去考研的时候，也无法做到这样吧？
各种外界因素不断挑动着神经挑动着你的坚定，才能意识到，心无旁骛是怎样的一种专注，我觉得我缺少了很多份这样的东西，我慢慢的都是自我怀疑，或许是懦弱的自卑的太久了。，就像是佝偻了太久了已经直不起腰了，虽然像是借口，但是我知道我做不到。
 但关于坚持，我最喜欢的一句话是： 坚持并不是永不动摇，而是在犹豫和退缩的时刻决定继续往前走。 这句话最大的价值就是指明， 生活从来不是一片灰暗或者一片光明，而是永远在它们的中间线上。 没有人绝对强大。 但你会发现，几乎所有了不起的事情都是在战胜沮丧和软弱的过程中实现的。
 我想起今天跑操路上，听到了一首感触很深的歌，推开世界的门。我不知道你们看到的是什么我只知道这几个月来，每天6点看到的那个消息，已经快成为我的习惯虽然我做不到，但是至少从中能汲取到一点力量，让本来可能更加堕落的我知道了，有人已经这样子努力了，而你还在心安理得地虚度光阴，还在做着各种幼稚的事情你是不是也应该往前挪挪你的步子？
就算追不上别人的脚步，那也不应该成为你落在最后的理由吧你说呢？</description>
    </item>
    
    <item>
      <title>Github Pages</title>
      <link>/cn/2017-11-21-jekyll-1/</link>
      <pubDate>Tue, 21 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>/cn/2017-11-21-jekyll-1/</guid>
      <description>关于某天晚上又是深夜一两点在修改自己博客的故事
关于这个主题 basically 发生了一些这样的故事
![image-center]({{ site.url }}{{ site.baseurl }}/assets/images/chrome_2017-11-21_01-40-43.png){: .align-center}
这个确实是意想不到的事情，总被github说这个主题不合适，但明明就是他自己商店里的主题。
第二个地方是首页的图片 确实是一个个html找了好久，这个结构比较乱，当然也可能是我脑子转不动了。
第三点 当我把 index.md 改好之后发生了一个这样的事情
paginate: true alt_title: &amp;#34;Res0liya&amp;#34; sub_title: &amp;#34;To be or not to be&amp;#34; image: /assets/images/amine-ounnas-180287.jpg Posts都丢了，真是奇怪，但其实关键就在于这一行。
paginate: false 是否翻页，这个让我有些无奈&amp;hellip;还需要自己仔细看看</description>
    </item>
    
    <item>
      <title>A Plain Markdown Post</title>
      <link>/cn/2016-02-14-hello-markdown/</link>
      <pubDate>Sun, 14 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>/cn/2016-02-14-hello-markdown/</guid>
      <description>This sample post is mainly for blogdown users. If you do not use blogdown, you can skip the first section.
1. Markdown or R Markdown This is a post written in plain Markdown (*.md) instead of R Markdown (*.Rmd). The major differences are:
 You cannot run any R code in a plain Markdown document, whereas in an R Markdown document, you can embed R code chunks (```{r}); A plain Markdown post is rendered through Blackfriday, and an R Markdown document is compiled by rmarkdown and Pandoc.</description>
    </item>
    
  </channel>
</rss>